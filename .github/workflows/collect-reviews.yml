name: Collect PR Reviews for Memory

on:
  pull_request_review:
    types: [submitted]
  # Also trigger on review comments (inline comments)
  pull_request_review_comment:
    types: [created]

jobs:
  collect-review:
    runs-on: ubuntu-latest
    # Only run for actual reviews, not just comments
    if: github.event.review.state != 'commented' || github.event.action == 'created'
    
    permissions:
      contents: write
      pull-requests: read
      
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Get existing memory data
      run: |
        # Fetch memory branch and copy existing memory data to main branch
        if git ls-remote --heads origin memory | grep -q memory; then
          git fetch origin memory:memory
          git checkout memory
          if [ -d "memory_data" ]; then
            cp -r memory_data /tmp/existing_memory_data
          fi
          git checkout main
          if [ -d "/tmp/existing_memory_data" ]; then
            cp -r /tmp/existing_memory_data memory_data
          fi
        fi
        
    - name: Extract and process review
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO_NAME: ${{ github.repository }}
        REVIEW_ID: ${{ github.event.review.id || github.event.comment.id }}
        EVENT_TYPE: ${{ github.event_name }}
      run: |
        python scripts/extract_review.py
        
    - name: Backup memory data
      run: |
        # Create temporary backup of updated memory data
        if [ -d "memory_data" ]; then
          cp -r memory_data /tmp/memory_data_backup
        fi
        
    - name: Checkout memory branch
      run: |
        # Remove any untracked memory_data files to avoid conflicts
        rm -rf memory_data
        
        # Check if memory branch exists on remote
        if git ls-remote --heads origin memory | grep -q memory; then
          # Remote memory branch exists, fetch and checkout
          git fetch origin memory
          git checkout memory
        else
          # Create new orphan memory branch
          git checkout --orphan memory
          git rm -rf . 2>/dev/null || true
          mkdir -p memory_data
          echo '{"embeddings": [], "metadata": {"version": "1.0", "created": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}}' > memory_data/metadata.json
          git add memory_data/metadata.json
          git commit -m "Initialize memory branch" --allow-empty
          git push origin memory
        fi
        
    - name: Restore memory data
      run: |
        # Restore the generated memory data from backup
        if [ -d "/tmp/memory_data_backup" ]; then
          cp -r /tmp/memory_data_backup/* memory_data/ 2>/dev/null || true
        fi
        
    - name: Update memory and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add all changes in memory_data directory
        git add memory_data/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update memory: PR #${{ github.event.pull_request.number }} review by @${{ github.event.review.user.login || github.event.comment.user.login }}"
          git push origin memory
          echo "âœ… Memory updated successfully"
        fi